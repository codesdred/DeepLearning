# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DYOS4qq2jlQAzgG7a5n32KU3Xzg31B4Y
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#importing dataset
data = pd.read_csv('Google_Stock_Price_Train.csv')
train_data = data.iloc[:,1:2].values

#Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
train_data_scaled = sc.fit_transform(train_data)

#Making data structure with some timestamps t
t = 60
X_train = []
y_train = []
for i in range(t,train_data_scaled.shape[0]):
    temp=[]
    for j in range(i-60,i):
        temp.append(train_data_scaled[j][0])
    X_train.append(temp)
    y_train.append(train_data_scaled[i][0])
X_train = np.array(X_train)
y_train = np.array(y_train)

#Reshaping our input
X_train = np.reshape(X_train , (X_train.shape[0], X_train.shape[1], 1))

#Creating LSTM layers
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout

rnn = Sequential()

rnn.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
rnn.add(Dropout(0.2))
rnn.add(LSTM(units=50, return_sequences=True))
rnn.add(Dropout(0.2))
rnn.add(LSTM(units=50, return_sequences=True))
rnn.add(Dropout(0.2))
rnn.add(LSTM(units=50))
rnn.add(Dropout(0.2))
rnn.add(Dense(units=1))

rnn.compile(optimizer='adam', loss='mean_squared_error')

rnn.fit(X_train, y_train, epochs=25, batch_size=32)

dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')

real_stock_price = dataset_test.iloc[:,1:2].values

dataset_total = pd.concat((data['Open'], dataset_test['Open']), axis=0)

dataset_total

inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values

inputs

len(inputs)

inputs = inputs.reshape(-1,1)

inputs = sc.transform(inputs)

inputs

t = 60
X_test = []
y_test = []
for i in range(t,80):
  X_test.append(inputs[i-t:i,0])
  y_test.append(inputs[i,0])
X_test = np.array(X_test)
y_test = np.array(y_test)

X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)

X_test.shape

predicted_stock_price = rnn.predict(X_test)

predicted_stock_price = sc.inverse_transform(predicted_stock_price)

predicted_stock_price

y_test = sc.inverse_transform(y_test.reshape(-1,1))

y_test

plt.plot(y_test, color='red', label='Real Google Stock Price')
plt.plot(predicted_stock_price, color='blue', label='Predicted Google Stock Price')
plt.show()

